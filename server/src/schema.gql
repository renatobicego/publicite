# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Contact {
  _id: ID
  phone: String
  instagram: String
  facebook: String
  x: String
  website: String
}

type Board {
  _id: ID
  annotations: [String!]
  visibility: String
  user: String
  color: String
  keywords: [String!]
}

type Location_graphQl {
  type: String!
  coordinates: [Float!]!
}

type PostLocation_Grapql_Model {
  location: Location_graphQl!
  userSetted: Boolean!
  description: String!
}

type Visibility {
  post: String
  socialMedia: String
}

type AttachedFile {
  url: String!
  label: String!
}

type Post_Full_Graphql_Model {
  _id: ID
  title: String
  postType: String
  description: String
  visibility: Visibility
  price: Float
  location: PostLocation_Grapql_Model
  category: [String!]
  comments: [String!]
  attachedFiles: [AttachedFile!]
  createAt: String
  imagesUrls: [String!]
  year: Int
  brand: String
  modelType: String
  reviews: [String!]
  condition: GoodCondition
  frequencyPrice: String
  toPrice: Float
  petitionType: String
}

"""Condition of the good"""
enum GoodCondition {
  New
  Used
  Broke
}

type Subscriptions_Full_Graphql_Model {
  _id: ID!
  mpPreapprovalId: String
  payerId: String
  status: String
  subscriptionPlan: String
  startDate: String
  endDate: String
  external_reference: String
  timeOfUpdate: String
}

type Groups_Full_Graphql_Model {
  _id: ID
  name: String
  members: [String!]
  profilePhotoUrl: String
}

type Magazines_Full_Graphql_Model {
  _id: ID
  name: String
  sections: Sections_Full_Graphql_Model
}

type Post_full_Graph {
  _id: ID
  imagesUrls: [String!]
}

type Sections_Full_Graphql_Model {
  _id: ID
  posts: Post_full_Graph
}

type User_Full_Grapql_Model {
  _id: ID
  clerkId: String
  email: String
  username: String
  description: String
  profilePhotoUrl: String
  countryRegion: String
  name: String
  lastName: String
  isActive: String
  businessName: String
  contact: Contact
  createdTime: String
  magazines: [Magazines_Full_Graphql_Model]
  board: Board
  posts: [Post_Full_Graphql_Model]
  subscriptions: [Subscriptions_Full_Graphql_Model]
  userType: String
  groups: [Groups_Full_Graphql_Model]
}

type location {
  type: String!
  coordinates: [Float!]!
}

type Contact_graph {
  _id: ID
  phone: String
  instagram: String
  facebook: String
  x: String
  website: String
}

type author {
  profilePhotoUrl: String!
  username: String!
  contact: Contact_graph!
  lastName: String!
  name: String!
}

type PostLocation_Grapql {
  _id: String
  location: location
  userSetted: Boolean
  description: String
}

type Visibility_post {
  post: String
  socialMedia: String
}

type AttachedFile_post {
  url: String!
  label: String!
}

type Post_Category {
  _id: String
  label: String
}

type Post_response_graphql_model {
  _id: ID
  title: String
  postType: String
  description: String
  visibility: Visibility_post
  author: author
  price: Float
  location: PostLocation_Grapql
  category: [Post_Category!]
  comments: [String!]
  attachedFiles: [AttachedFile_post!]
  createAt: String
  imagesUrls: [String!]
  year: Int
  brand: String
  modelType: String
  reviews: [String!]
  condition: String
  frequencyPrice: String
  toPrice: Float
  petitionType: String
}

type members_graphQl {
  _id: String
  username: String
  profilePhotoUrl: String
}

type post_magazines_section {
  imagesUrls: String
}

type magazines_section {
  posts: post_magazines_section
}

type GroupResponse {
  _id: String!
  members: [members_graphQl!]!
  admins: [String!]!
  name: String!
  rules: String!
  magazines: [String!]!
  details: String!
  profilePhotoUrl: String!
  visibility: String!
}

type GroupListResponse {
  groups: [GroupResponse!]!
  hasMore: Boolean!
}

type posts_graphql_magazine {
  _id: String
  imagesUrls: [String!]
  title: String
  description: String
  price: Float
  frequencyPrice: String
  petitionType: String
}

type collaborators_graphql {
  _id: String
  username: String
  profilePhotoUrl: String
}

type sections_graphql_magazine {
  _id: String
  isFatherSection: Boolean
  posts: [posts_graphql_magazine!]
  title: String
}

type group_graphql_magazine {
  _id: String
  name: String
  profilePhotoUrl: String
}

type allowedColaborators_graphql_magazine {
  _id: String
  username: String
  profilePhotoUrl: String
}

type user_graphql_magazine {
  _id: String
  username: String
  profilePhotoUrl: String
}

type MagazineResponse {
  _id: String!
  name: String!
  sections: [sections_graphql_magazine!]!
  ownerType: String!
  description: String
  collaborators: [collaborators_graphql!]
  user: user_graphql_magazine
  visibility: String
  allowedColaborators: [allowedColaborators_graphql_magazine!]
  group: group_graphql_magazine
}

type PostCategoryResponse {
  label: String!
  _id: String!
}

type Query {
  """Obtiene un usuario por su nombre de usuario"""
  findOneByUsername(username: String!): User_Full_Grapql_Model

  """Obtener Post por autor"""
  findPostsByAuthorId(authorId: String!): [Post_Full_Graphql_Model!]

  """Obtener Post por su Id"""
  findPostById(id: String!): Post_response_graphql_model

  """Busca un grupo por su id"""
  getGroupById(id: String!): GroupResponse

  """Busca un grupo por su nombre"""
  getGroupByName(name: String!, limit: Float): GroupListResponse

  """Crear una revista"""
  getMagazineByMagazineId(id: String!): MagazineResponse

  """Devuelve todas las categorias creadas"""
  getAllCategoryPost: [PostCategoryResponse!]
}

type Mutation {
  """eliminar un post por id"""
  deletePostById(id: String!): String

  """Actualizar un post"""
  updatePostById(postUpdate: PostUpdateRequest!, id: String!): String

  """Actualiza el board del usuario"""
  updateBoardByUsername(id: String!, boardData: UpdateBoardDto!): Board

  """Crear un grupo"""
  createNewGroup(groupDto: GroupRequest!): GroupResponse

  """Crear una revista"""
  createMagazine(magazineCreateRequest: MagazineCreateRequest!): String

  """Crear una categoria de un post"""
  createNewCategoryPost(category: PostCategoryRequest!): PostCategoryResponse
}

input PostUpdateRequest {
  title: String
  description: String
  visibility: VisibilityEnum
  price: Float
  postType: PostType!
  category: [String!]
  attachedFiles: [AttachedFiles!]
  imagesUrls: [String!]
  year: Int
  brand: String
  modelType: String
  condition: String
  toPrice: String
  frequencyPrice: FrequencyPrice
  petitionType: String
}

input VisibilityEnum {
  post: Visibility_of_the_post!
  socialMedia: Visibility_of_the_post!
}

"""Visibility of the post """
enum Visibility_of_the_post {
  Public
  Registgered
  Contacts
  Friends
  TopFriends
}

"""Type of the post """
enum PostType {
  Good
  Service
  Petition
}

input AttachedFiles {
  url: String!
  label: String!
}

"""Frecuencia """
enum FrequencyPrice {
  Hour
  Day
  Week
  Month
  Year
}

input UpdateBoardDto {
  annotations: [String!]
  visibility: Visibility_Enum_board
  user: String
  color: String
  keywords: [String!]
}

enum Visibility_Enum_board {
  public
  registered
  contacts
  friends
  topfriends
}

input GroupRequest {
  members: [String!]!
  admins: [String!]!
  name: String!
  rules: String!
  magazines: [String!]!
  details: String!
  profilePhotoUrl: String!
  visibility: String!
}

input MagazineCreateRequest {
  name: String!
  sections: [String!]!
  ownerType: OwnerType!
  description: String
  addedPost: String
  collaborators: [String!]
  user: String
  visibility: String!
  allowedColaborators: [String!]
  group: [String!]
}

"""Owner type of the magazine"""
enum OwnerType {
  user
  group
}

input PostCategoryRequest {
  label: String!
}