# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Contact {
  _id: ID
  phone: String
  instagram: String
  facebook: String
  x: String
  website: String
}

type Board {
  _id: ID
  annotations: [String!]
  visibility: String
  user: String
  color: String
  keywords: [String!]
}

type PostLocation_Grapql_Model {
  type: String!
  coordinates: [Float!]!
  userSetted: Boolean!
  description: String!
}

type Visibility {
  post: String
  socialMedia: String
}

type AttachedFile {
  url: String!
  label: String!
}

type Post_Full_Graphql_Model {
  _id: ID
  title: String
  postType: String
  description: String
  visibility: Visibility
  price: Float
  location: PostLocation_Grapql_Model
  category: [String!]
  comments: [String!]
  attachedFiles: [AttachedFile!]
  createAt: String
  imageUrls: [String!]
  year: Int
  brand: String
  modelType: String
  reviews: [String!]
  condition: GoodCondition
  frequencyPrice: String
  toPrice: Float
  petitionType: String
}

"""Condition of the good"""
enum GoodCondition {
  New
  Used
  Broke
}

type UserPreferences_Grapql_Model {
  searchPreference: [ID!]
  backgroundColor: Float
}

type User_Full_Grapql_Model {
  _id: ID
  clerkId: String
  email: String
  username: String
  description: String
  profilePhotoUrl: String
  countryRegion: String
  name: String
  lastName: String
  isActive: String
  businessName: String
  contact: Contact
  createdTime: String
  board: Board
  posts: [Post_Full_Graphql_Model]
  userType: String
  userPreferences: UserPreferences_Grapql_Model
}

type GroupResponse {
  _id: String!
  members: [String!]!
  admins: [String!]!
  name: String!
  rules: String!
  magazines: [String!]!
  details: String!
  profilePhotoUrl: String!
  visibility: String!
}

type Query {
  """Obtiene un usuario por su nombre de usuario"""
  findOneByUsername(username: String!): User_Full_Grapql_Model

  """Obtener Post por autor"""
  findPostsByAuthorId(authorId: String!): [Post_Full_Graphql_Model!]
}

type Mutation {
  """Actualizar un post"""
  deletePostById(id: String!): String

  """Actualizar un post"""
  updatePostById(postUpdate: PostUpdateRequest!, id: String!): String

  """Actualiza el board del usuario"""
  updateBoardByUsername(id: String!, boardData: UpdateBoardDto!): Board

  """Crear un grupo"""
  createNewGroup(groupDto: GroupRequest!): GroupResponse
}

input PostUpdateRequest {
  title: String
  description: String
  visibility: VisibilityEnum
  price: Float
  postType: PostType!
  category: [String!]
  attachedFiles: [AttachedFiles!]
  imageUrls: [String!]
  year: Int
  brand: String
  modelType: String
  condition: String
  toPrice: String
  frequencyPrice: FrequencyPrice
  petitionType: String
}

input VisibilityEnum {
  post: Visibility_of_the_post!
  socialMedia: Visibility_of_the_post!
}

"""Visibility of the post """
enum Visibility_of_the_post {
  Public
  Registgered
  Contacts
  Friends
  TopFriends
}

"""Type of the post """
enum PostType {
  Good
  Service
  Petition
}

input AttachedFiles {
  url: String!
  label: String!
}

"""Frecuencia """
enum FrequencyPrice {
  Hour
  Day
  Week
  Month
  Year
}

input UpdateBoardDto {
  annotations: [String!]
  visibility: Visibility_Enum_board
  user: String
  color: String
  keywords: [String!]
}

enum Visibility_Enum_board {
  public
  registered
  contacts
  friends
  topfriends
}

input GroupRequest {
  members: [String!]!
  admins: [String!]!
  name: String!
  rules: String!
  magazines: [String!]!
  details: String!
  profilePhotoUrl: String!
  visibility: String!
}