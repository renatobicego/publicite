# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type members_graphQl {
  _id: String!
  username: String!
  profilePhotoUrl: String
  name: String
  lastName: String
  businessName: String
}

type post_graphql_group {
  _id: ID
  imagesUrls: [String!]
}

type sections_graphql_group {
  _id: ID
  posts: [post_graphql_group!]
}

type magazine_graphql_group {
  _id: ID
  name: String
  sections: [sections_graphql_group!]
}

type GroupResponse_admins {
  _id: String!
  username: String!
}

type notification_user_populate {
  _id: String
  username: String
  profilePhotoUrl: String
}

type Notification_group {
  groupInvitations: [notification_user_populate!]
  joinRequests: [notification_user_populate!]
}

type GroupResponse {
  _id: String!
  members: [members_graphQl!]
  admins: [GroupResponse_admins!]
  name: String!
  alias: String!
  creator: String!
  rules: String
  magazines: [magazine_graphql_group!]
  details: String
  profilePhotoUrl: String
  visibility: String!
  groupNotificationsRequest: Notification_group
}

type GroupResponseById {
  group: GroupResponse!
  isMember: Boolean!
  hasJoinRequest: Boolean!
  hasGroupRequest: Boolean!
}

type GroupList {
  group: GroupResponse
  isMember: Boolean
  hasJoinRequest: Boolean
  hasGroupRequest: Boolean
}

type GroupListResponse {
  groups: [GroupList!]!
  hasMore: Boolean!
}

type Post_of_members_group {
  _id: ID
  imagesUrls: [String!]
  title: String
  description: String
  price: Float
  frequencyPrice: String
  toPrice: Float
  petitionType: String
}

type GroupPostMemberResponse {
  _id: String!
  username: String!
  name: String!
  lastName: String!
  profilePhotoUrl: String!
  posts: [Post_of_members_group!]
}

type PostsMemberGroupResponse {
  userAndPosts: [GroupPostMemberResponse!]!
  hasMore: Boolean!
}

type posts_graphql_magazine {
  _id: String
  imagesUrls: [String!]
  title: String
  description: String
  price: Float
  frequencyPrice: String
  petitionType: String
  postType: String
}

type collaborators_graphql {
  _id: String
  username: String
  profilePhotoUrl: String
}

type sections_graphql_magazine {
  _id: String
  isFatherSection: Boolean
  posts: [posts_graphql_magazine!]
  title: String
}

type group_graphql_magazine {
  _id: String
  name: String
  profilePhotoUrl: String
  admins: [String!]
  creator: String
}

type allowedCollaborators_graphql_magazine {
  _id: String
  username: String
  profilePhotoUrl: String
}

type user_graphql_magazine {
  _id: String
  username: String
  profilePhotoUrl: String
}

type MagazineResponse {
  _id: String!
  name: String!
  sections: [sections_graphql_magazine!]!
  ownerType: String!
  description: String
  collaborators: [collaborators_graphql!]
  user: user_graphql_magazine
  allowedCollaborators: [allowedCollaborators_graphql_magazine!]
  group: group_graphql_magazine
}

type location {
  type: String!
  coordinates: [Float!]!
}

type Contact_graph {
  _id: ID
  phone: String
  instagram: String
  facebook: String
  x: String
  website: String
}

type author {
  profilePhotoUrl: String!
  username: String!
  contact: Contact_graph!
  lastName: String!
  name: String!
}

type PostLocation_Grapql {
  _id: String
  location: location
  userSetted: Boolean
  description: String
}

type Visibility_post {
  post: String
  socialMedia: String
}

type AttachedFile_post {
  url: String!
  label: String!
}

type Post_Category {
  _id: String
  label: String
}

type Post_response_graphql_model {
  _id: String
  title: String
  postType: String
  description: String
  visibility: Visibility_post
  author: author
  price: Float
  location: PostLocation_Grapql
  category: [Post_Category!]
  comments: [String!]
  attachedFiles: [AttachedFile_post!]
  createAt: String
  imagesUrls: [String!]
  year: Int
  brand: String
  modelType: String
  reviews: [String!]
  condition: String
  frequencyPrice: String
  toPrice: Float
  petitionType: String
}

type PostFindAllResponse {
  posts: [Post_response_graphql_model!]!
  hasMore: Boolean!
}

type Location_graphQl {
  type: String!
  coordinates: [Float!]!
}

type PostLocation_Grapql_Model {
  location: Location_graphQl!
  userSetted: Boolean!
  description: String!
}

type Visibility {
  post: String
  socialMedia: String
}

type AttachedFile {
  url: String!
  label: String!
}

type Post_Full_Graphql_Model {
  _id: ID
  title: String
  postType: String
  description: String
  visibility: Visibility
  price: Float
  location: PostLocation_Grapql_Model
  category: [String!]
  comments: [String!]
  attachedFiles: [AttachedFile!]
  createAt: String
  imagesUrls: [String!]
  year: Int
  brand: String
  modelType: String
  reviews: [String!]
  condition: GoodCondition
  frequencyPrice: String
  toPrice: Float
  petitionType: String
}

"""Condition of the good"""
enum GoodCondition {
  New
  Used
  Broke
}

type Contact {
  _id: ID
  phone: String
  instagram: String
  facebook: String
  x: String
  website: String
}

type front_data_GROUP {
  _id: String!
  name: String!
  profilePhotoUrl: String!
}

type backData {
  userIdTo: String
  userIdFrom: String
}

type userInviting {
  username: String!
}

type groupInviting {
  name: String!
}

type notification {
  event: String!
  viewed: Boolean!
  date: String!
  backData: backData
}

type magazineNotification {
  _id: String!
  name: String!
  ownerType: String!
  userInviting: userInviting
  groupInviting: groupInviting
}

type frontData {
  group: front_data_GROUP
  userInviting: userInviting
  magazine: magazineNotification
}

type Notification {
  _id: String!
  notification: notification!
  frontData: frontData!
}

type GROUP_notification_graph_model_get_all {
  notifications: [Notification!]!
  hasMore: Boolean!
}

type Board {
  _id: ID
  annotations: [String!]
  visibility: String
  user: String
  color: String
  keywords: [String!]
  searchTerm: String
}

type Subscriptions_Full_Graphql_Model {
  _id: ID!
  mpPreapprovalId: String
  payerId: String
  status: String
  subscriptionPlan: String
  startDate: String
  endDate: String
  external_reference: String
  timeOfUpdate: String
}

type Post_full_Graph {
  _id: ID
  imagesUrls: [String!]
}

type Groups_Full_Graphql_Model {
  _id: ID
  name: String
  members: [String!]
  profilePhotoUrl: String
}

type Sections_Full_Graphql_Model {
  _id: ID
  posts: [Post_full_Graph!]
}

type Magazines_Full_Graphql_Model {
  _id: ID
  name: String
  sections: [Sections_Full_Graphql_Model!]
  description: String
}

type User_Full_Grapql_Model {
  _id: ID
  clerkId: String
  email: String
  username: String
  description: String
  profilePhotoUrl: String
  countryRegion: String
  name: String
  lastName: String
  isActive: String
  businessName: String
  contact: Contact
  createdTime: String
  magazines: [Magazines_Full_Graphql_Model]
  board: Board
  posts: [Post_Full_Graphql_Model]
  subscriptions: [Subscriptions_Full_Graphql_Model]
  userType: String
  groups: [Groups_Full_Graphql_Model]
}

type PostCategoryResponse {
  label: String!
  _id: String!
}

type userBoardGraphql {
  _id: ID
  profilePhotoUrl: String
  name: String
  lastName: String
  businessName: String
  username: String
}

type BoardResponse {
  _id: ID
  annotations: [String!]
  visibility: String
  user: userBoardGraphql!
  color: String
  keywords: [String!]
}

type BoardGetAllResponse {
  boards: [BoardResponse!]!
  hasMore: Boolean!
}

type PaymentResponse {
  _id: String!
  mpPaymentId: String!
  payerId: String!
  payerEmail: String
  paymentTypeId: String!
  paymentMethodId: String!
  transactionAmount: String!
  dateApproved: String
  external_reference: String!
  status_detail: String!
  timeOfUpdate: String!
  status: String!
}

type Query {
  """Buscar los pagos por id de clerk"""
  findPaymentByClerkId(id: String!): [PaymentResponse!]

  """Obtiene un usuario por su nombre de usuario """
  findUserByUsername(username: String!): User_Full_Grapql_Model

  """obtener todas las notificaciones de un usuario por su Id"""
  getAllNotificationsFromUserById(limit: Float!, page: Float!): GROUP_notification_graph_model_get_all

  """Obtener Post por autor"""
  findPostsByAuthorId(authorId: String!): [Post_Full_Graphql_Model!]

  """Obtener Post por su Id"""
  findPostById(id: String!): Post_response_graphql_model

  """Buscar todos los post"""
  findAllPostByPostType(page: Float!, limit: Float!, postType: PostType!, searchTerm: String): PostFindAllResponse

  """Obtener un board por anotaciones o palabras clave"""
  getBoardByAnnotationOrKeyword(board: String!, limit: Float!, page: Float!): BoardGetAllResponse

  """Busca un grupo por su id"""
  getGroupById(id: String!): GroupResponseById

  """
  Obtiene los posts de los miembros de un grupo, buscando el grupo por su ID
  """
  getPostsOfGroupMembers(id: String!, limit: Float!, page: Float!): PostsMemberGroupResponse

  """Busca un grupo por su nombre o alias"""
  getGroupByNameOrAlias(
    """nombre del grupo o el alias"""
    name: String!
    limit: Float!
    page: Float!
  ): GroupListResponse

  """Buscar si existe un grupo"""
  isThisGroupExist(alias: String!): Boolean

  """Obtener una revista"""
  getMagazineByMagazineId(id: String!): MagazineResponse

  """Obtener todas las revistas en las que un usuario puede colaborar"""
  getAllMagazinesByUserId(userId: String!): [MagazineResponse!]

  """Devuelve todas las categorias creadas"""
  getAllCategoryPost: [PostCategoryResponse!]
}

"""Type of the post """
enum PostType {
  good
  service
  petition
}

type Mutation {
  """eliminar un post por id"""
  deletePostById(id: String!): String

  """Actualizar un post"""
  updatePostById(postUpdate: PostUpdateRequest!, id: String!, author_id: String!): String

  """Actualiza el board del usuario"""
  updateBoardById(id: String!, ownerId: String!, boardData: UpdateBoardDto!): Board

  """Aceptar la invitacion a un grupo"""
  acceptGroupInvitation(groupId: String!): String

  """Agregar admins un grupo"""
  addAdminsToGroupByGroupId(newAdmin: String!, groupAdmin: String!, groupId: String!): String

  """
  Aceptar la invitacion de un miembro a un grupo- Solo admins o creadores pueden aceptar
  """
  acceptJoinGroupRequest(newMember: String!, groupAdmin: String!, groupId: String!): String

  """Agregar revistas a un grupo"""
  addMagazinezToGroupByGroupId(newMagazines: [String!]!, groupAdmin: String!, groupId: String!): String

  """Crear un grupo"""
  createNewGroup(groupDto: GroupRequest!): GroupResponse

  """Eliminar admins un grupo"""
  removeAdminsFromGroupByGroupId(adminsToDelete: [String!]!, groupCreator: String!, groupId: String!): String

  """Eliminar miembros un grupo"""
  deleteMembersFromGroupByGroupId(membersToDelete: [String!]!, groupAdmin: String!, groupId: String!): String

  """Eliminar revistas de un grupo"""
  deleteMagazinesFromGroupByGroupId(magazinesToDelete: [String!]!, groupAdmin: String!, groupId: String!): String

  """Actualizar un grupo"""
  updateGroupById(groupToUpdate: GroupUpdateRequest!): String

  """Eliminar un grupo por su id"""
  deleteGroupById(groupId: String!, groupCreator: String!): String

  """
  Salir de un grupo - En el caso de que sea el creador debera asignar otro creador
  """
  exitGroupById(groupId: String!, member: String, creator: String, newCreator: String): String

  """Agregar nueva seccion en la revista"""
  addNewMagazineSection(magazineAdmin: String!, magazineId: String!, section: MagazineSectionCreateRequest!, groupId: String): String

  """Agregar post en la revista de usuario"""
  addPostInUserMagazine(postId: String!, magazineAdmin: String!, magazineId: String!, sectionId: String!): String

  """Agregar post en la revista de grupo"""
  addPostInGroupMagazine(postId: [String!]!, magazineAdmin: String!, magazineId: String!, sectionId: String!): String

  """Agregar colaboradores a la revista de usuario"""
  addCollaboratorsToUserMagazine(newCollaborators: [String!]!, magazineAdmin: String!, magazineId: String!): String

  """Agregar allowedCollaborators a la revista de grupo"""
  addAllowedCollaboratorsToGroupMagazine(newallowedCollaborators: [String!]!, magazineId: String!, magazineAdmin: String!): String

  """Eliminar colaboradores de la revista de usuario"""
  deleteCollaboratorsFromUserMagazine(collaboratorsToDelete: [String!]!, magazineId: String!, magazineAdmin: String!): String

  """Eliminar allowed colaboradores de la revista de grupo"""
  deleteAllowedCollaboratorsFromMagazineGroup(allowedCollaboratorsToDelete: [String!]!, magazineId: String!, magazineAdmin: String!): String

  """
  Eliminar secciones de la revista, siendo un colaborador de la misma o un administrador de del grupo de la revista
  """
  deleteSectionFromMagazineById(sectionIdsToDelete: [String!]!, magazineId: String!, allowedCollaboratorId: String, userMagazineAllowed: String): String

  """Crear una revista"""
  createMagazine(magazineCreateRequest: MagazineCreateRequest!): String

  """Actualizar una revista"""
  updateMagazineById(
    magazineUpdateRequest: MagazineUpdateRequest!
    owner: String!

    """El id del grupo en el caso de que la revista sea de grupo"""
    groupId: String
  ): String

  """Actualizar el nombre de una seccion en una revista"""
  updateTitleOfSectionById(sectionId: String!, newTitle: String!, ownerType: OwnerType!, magazineId: String): String

  """Eliminar posts de una seccion en una revista"""
  deletePostInMagazineSection(postIdToRemove: String!, sectionId: String!, ownerType: OwnerType!, magazineId: String): String

  """Crear una categoria de un post"""
  createNewCategoryPost(category: PostCategoryRequest!): PostCategoryResponse
}

input PostUpdateRequest {
  title: String
  description: String
  visibility: VisibilityEnum
  price: Float
  postType: PostType!
  category: [String!]
  attachedFiles: [AttachedFiles!]
  imagesUrls: [String!]
  year: Int
  brand: String
  modelType: String
  condition: String
  toPrice: Float
  frequencyPrice: FrequencyPrice
  petitionType: String
}

input VisibilityEnum {
  post: Visibility_of_the_post!
  socialMedia: Visibility_of_the_post!
}

"""Visibility of the post """
enum Visibility_of_the_post {
  public
  registered
  contacts
  friends
  topfriends
}

input AttachedFiles {
  url: String!
  label: String!
}

"""Frecuencia """
enum FrequencyPrice {
  hour
  day
  week
  month
  year
}

input UpdateBoardDto {
  annotations: [String!]
  visibility: Visibility_Enum_board
  color: String
  keywords: [String!]
}

enum Visibility_Enum_board {
  public
  registered
  contacts
  friends
  topfriends
}

input GroupRequest {
  members: [String!]!
  admins: [String!]!
  name: String!
  alias: String!
  rules: String!
  magazines: [String!]!
  details: String!
  profilePhotoUrl: String!
  visibility: Visibility_Enum_Group!
}

enum Visibility_Enum_Group {
  public
  private
}

input GroupUpdateRequest {
  _id: String!
  admin: String!
  name: String
  rules: String
  magazines: [String!]
  details: String
  profilePhotoUrl: String
  visibility: String
}

input MagazineSectionCreateRequest {
  title: String!
  isFatherSection: Boolean!
}

input MagazineCreateRequest {
  name: String!
  sections: [String!]!
  ownerType: OwnerType!
  description: String
  addedPost: String
  collaborators: [String!]
  user: String
  visibility: String
  allowedCollaborators: [String!]
  group: String
}

"""Owner type of the magazine"""
enum OwnerType {
  user
  group
}

input MagazineUpdateRequest {
  _id: String!
  name: String
  ownerType: OwnerType!
  description: String
  visibility: String
}

input PostCategoryRequest {
  label: String!
}